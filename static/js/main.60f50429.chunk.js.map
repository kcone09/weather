{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.compnent.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","celsius","min","max","minMaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadWeather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","resp","setState","sys","convertTemp","main","temp","weather","getWeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeID","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.60f50429.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Weather = props => {\r\n  return (\r\n    <div className=\"container text-light\">\r\n      <div className=\"cards pt-4\">\r\n        <h1>{props.city}</h1>\r\n        <h5 className=\"py-4\">\r\n          <i className={` wi ${props.weatherIcon} display-1`} />\r\n        </h5>\r\n        {props.celsius ? <h1 className=\"py-2\">{props.celsius}&deg;</h1> : null}\r\n        {/* show max and min temp */}\r\n        {minMaxTemp(props.temp_min, props.temp_max)}\r\n        <h4 className=\"py-3\">{props.description}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction minMaxTemp(min, max) {\r\n  if ((min, max)) {\r\n    return (\r\n      <h3>\r\n        <span className=\"px-4\">Min {min}&deg;</span>\r\n        <span className=\"px-4\">Max {max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport \"./Form.css\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div>{props.error ? error() : null}</div>\r\n      <form onSubmit={props.loadWeather}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3 offset-md-2\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"City\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"Country\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n            <button className=\"btn btn-warning\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction error() {\r\n  return (\r\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n      Please Enter City and Country\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.min.css\";\n\nimport Weather from \"./app_component/weather.component\";\nimport Form from \"./app_component/form.compnent\";\n\n//make api call to this link api.openweathermap.org/data/2.5/weather?q={city name}&appid={your api key}\nconst APIKEY = \"c60388b79d5ff38524a67315bd3c0edb\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false,\n    };\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\",\n    };\n  }\n\n  componenDidMount() {}\n\n  convertTemp(temp) {\n    let cel = Math.floor(temp - 273.15);\n    return cel;\n  }\n\n  getWeatherIcon(icons, rangeID) {\n    switch (true) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeID >= 500 && rangeID <= 531:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeID >= 600 && rangeID <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeID >= 701 && rangeID <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeID === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  getWeather = async e => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    if ((city, country)) {\n      const api_call = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${APIKEY}`\n      );\n      const resp = await api_call.json();\n\n      this.setState({\n        city: `${resp.name}, ${resp.sys.country}`,\n        celsius: this.convertTemp(resp.main.temp),\n        temp_max: this.convertTemp(resp.main.temp_max),\n        temp_min: this.convertTemp(resp.main.temp_min),\n        description: resp.weather[0].description,\n        error: false,\n      });\n\n      this.getWeatherIcon(this.weatherIcon, resp.weather[0].id);\n    } else {\n      this.setState({ error: true });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadWeather={this.getWeather} error={this.state.error} />\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}